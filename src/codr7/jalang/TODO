0.38647935
0.21343191

* add warmup to benchmark op
* move Function special case from SexprForm.emit to FunctionType.call

* add and macro
* add not function

* change trait argument types to Value<?>

* add let macro
** change lookup fib (benchmarks/tests) to use let

(let [x 1 y 2]
  (+ x y))

* hook up type hierarchy
** add type function
** add is function

* add or types
** Integer|None
** relaxing requirements should not break callers
** strengthening promises should not break callers
** add X? as alias for X|None
** change find-if resultType Any?

* convert reduce/map ops to macros like find/index-if

* add dynamic scope support for defines in let

* check function argument types at compile time

* turn pair into collection/sequence type

* add character literals

\a \b \\n

* add vm arg to operation toString
** add abstract method to operation
** lookup values for registers
*** value: 15 (...)