0.4594874
0.010435875
0.1980878

* store register count on function emit
** only copy up to
** pushCall/Return

* add TimeType
** Duration
** use in benchmark macro

* add symbol macros
** add register-count
** say in benchmarks.jlg

* add let macro
** change lookup fib (benchmarks/tests) to use let

(let [x 1 y 2]
  (+ x y))

* hook up type hierarchy
** add type function
** add is function

* turn pair into collection/sequence type

* test/fix closures

* add or-types
** Integer|None
** relaxing requirements should not break callers
** strengthening promises should not break callers
** add X? as alias for X|None
** change find-if resultType Any?

* convert reduce/map ops to macros like find/index-if

* add user macros
** add Form.quote/unquote
** change SymbolReader to QupteReader
*** add QuoteForm

* add dynamic scope support for defines in let

* check function argument types at compile time

* add character literals

\a \b \\n

* add vm arg to operation toString
** add abstract method to operation
** lookup values for registers
*** value: 15 (...)