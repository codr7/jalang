(check T
  (= 42 42))
  
(check F
  (= 42 41))

(check T
  (= 'foo 'foo))

(check F
  (= 'foo 'bar))
  
(check T
  (< "abc" "def" "ghi"))

(check F
  (< "abc" "ghi" "def"))
  
(check T
  (> "ghi" "def" "abc"))
  
(check F
  (> "ghi" "abc" "def"))

(check 5
  (+ 3 2))
  
(check 1
  (- 3 2))

(check 5
  (+1 4))
  
(check 4
  (-1 5))

(check 1
  (head 1:2))
  
(check 2
  (tail 1:2))

(check 1
  (head 1:2:3))

(check 2:3
  (tail 1:2:3))

(check 4:5
  (_:_:tail 1:2:3:4:5))

(check 2
  (tail:_ 1:2:3))

(check ["foo" "bar" "baz"]
  (vector (split "foo bar baz" " ")))

(check "1 2 3"
  (string 1 " " 2 " " 3))

(check "oof"
  (reverse-string "foo"))

(check "oo"
  (slice "foo" 1))

(check "bar"
  (slice "foobarbaz" 3 6))

(check 3
  (digit (find:_ digit? "a3b")))

(check 1
  (_:find digit? "a3b"))
  
(check 42:3
  (parse-integer " 42foo"))

(check 3
  (length "foo"))
  
(check 3
  (length [1 2 3]))

(check [0 1 2]
  (vector 3))

(check ['foo 'bar]
  (push ['foo] 'bar))

(check 'bar
  (pop ['foo 'bar]))

(check 'bar
  (['foo 'bar 'baz] 1))
  
(check [5 7 9]
  (vector (map + [1 2 3] [4 5 6 7])))

(check 3
  (length {1 2 3:4}))

(check T
  (= {1 2 3:4} {1 2 3:4}))

(check 2
  ({'foo:1 'bar:2 'baz:3} 'bar))

(check 2
  (define m {'foo:1 'bar:2 'baz:3})
  (m 'bar))

(check [5 7 9]
  (function foo [l:Integer r:Integer]:Integer
    (+ l r))
  
  (vector (map foo [1 2 3] [4 5 6 7])))

(check 7
  (reduce + [1 2 3] 1))

(check 7
  (function foo [v:Integer result:Integer]:Integer
    (+ result v))

  (reduce foo [1 2 3] 1))

(check "foo"
  (if T "foo" "bar"))

(check "bar"
  (if F "foo" "bar"))

(check "bar"
  (if T (do "foo" "bar")))
  
(check 42
  (function foo []:Integer 42)
  
  (foo))

(check 43
  (function foo [x]:Integer
    (+ x 42))
    
  (foo 1))

(check 45
  (function foo [x:Integer y:Integer]:Integer
    (+ x y 42))
    
  (foo 1 2))

(check 6
  (function sum [n:Integer]:Integer
    (if (> n 1) (+ n (sum (- n 1))) n))
    
  (sum 3))

(check 55
  (function fib[n:Integer]:Integer
    (if (< n 2) n (+ (fib (-1 n)) (fib (-1 n)))))
    
  (fib 10))

(check 55
  (function fib[n:Integer a:Integer b:Integer]:Integer
    (if (> n 1) (fib (-1 n) b (+ a b)) (if (=0 n) a b)))
    
  (fib 10 0 1))

