(check 42
  (this 42))

(check T
  (= 42 42))
  
(check F
  (= 42 41))

(check T
  (= 'foo 'foo))

(check F
  (= 'foo 'bar))
  
(check \b
  ("abc" 1))

(check 1
  (find-character \b "abc"))

(check _
  (find-character \z "abc"))

(check T
  (< "abc" "def" "ghi"))

(check F
  (< "abc" "ghi" "def"))
  
(check T
  (> "ghi" "def" "abc"))
  
(check F
  (> "ghi" "abc" "def"))

(check T
  (>= 1 1))

(check T
  (>= 2 1))

(check F
  (>= 1 2))

(check 3
  (max 1 2 3))

(check 3
  (max 3 2 1))

(check 5
  (+ 3 2))

(check 5
  (+1 4))
  
(check 1
  (- 3 2))
  
(check 4
  (-1 5))

(check 24
  (* 2 3 4))

(check 42
  (push _ 42))
  
(check 1:2
  (push 2 1))

(check 42
  (peek 42))

(check _
  (pop 42))

(check 1
  (peek 1:2))
  
(check 2
  (tail 1:2))

(check 1
  (peek 1:2:3))

(check 2:3
  (tail 1:2:3))

(check 4:5
  (_:_:tail 1:2:3:4:5))

(check 1:2:3
  (push 2:3 1))

(check 1
  (peek 1:2:3))
  
(check 1
  (pop 1:2:3))

(check 2
  (tail:_ 1:2:3))

(check 1:2:3
  (List 1 2 3))

(check [1:\a:'foo 2:\b:'bar 3:\c:'baz]
  (apply Vector (zip 1:2:3 "abc" 'foo:'bar:'baz)))

(check [[1 2 3] [\a \b \c] ['foo 'bar 'baz]]
  (apply Vector (map (^ [i] (apply Vector i)) (unzip [1:\a:'foo 2:\b:'bar 3:\c:'baz]))))

(check ["foo" "bar" "baz"]
  (apply Vector (split "foo bar baz" \\s)))

(check ["foo" "bar" "baz"]
  (apply Vector (split "foo bar baz" " ")))

(check 'FooBar
  (Symbol "Foo" 'Bar))
  
(check "1 2 3"
  (String 1 " " 2 " " 3))

(check "oof"
  (reverse-string "foo"))

(check "oo"
  (slice "foo" 1))

(check "bar"
  (slice "foobarbaz" 3 6))

(check 3
  (digit (find:_ digit? "a3b")))

(check 1
  (_:find digit? "a3b"))

(check [\1 \2 \3]
  (apply Vector (filter digit? "1ab2cd3")))

(check 42:6
  (parse-integer "foo 42bar" 3))

(check 3
  (length "foo"))
  
(check 3
  (length [1 2 3]))

(check [0 1 2]
  (apply Vector 3))

(check [1 2 3]
  (push [1 2] 3))

(check 3
  (peek [1 2 3]))
  
(check 3
  (pop [1 2 3]))

(check 'bar
  (['foo 'bar 'baz] 1))

(check ['foo 'qux 'baz]
  (['foo 'bar 'baz] 1 'qux))

(check [5 7 9]
  (apply Vector (map + [1 2 3] [4 5 6 7])))

(check [[1 42] [2 42]]
  (^ foo [x]
     [x 42])

  [(foo 1) (foo 2)])

(check 3
  (length {1 2 3:4}))

(check T
  (= {1 2 3:4} {1 2 3:4}))

(check 2
  ({'foo:1 'bar:2 'baz:3} 'bar))

(check {'foo:1 'bar:4 'baz:3}
  ({'foo:1 'bar:2 'baz:3} 'bar 4))

(check [{1:42} {2:42}]
  (^ foo [x]
     {x:42})

  [(foo 1) (foo 2)])

(check 'foo
  (let [m {}]
    (m 1:2 'foo)
    (m 2:3 'bar)
    (m 1:2)))

(check {1 2}
  (intersection {1 2 3 4} {1 2 3} {1 2}))

(check 'baz
  (let [foo 'bar]
    (set foo 'baz)
    foo))

(check 'baz
  (let [foo 'bar]
    (set foo 'baz)))

(check {1 2 3}
  (Set 1 2 3))

(check {1:2 3:4}
  (Map 1 2 3 4))

(check [5 7 9]
  (^ foo [l r]
    (+ l r))
  
  (apply Vector (map foo [1 2 3] [4 5 6 7])))

(check 6
  (reduce + [2 3] 1))

(check ['foo 'bar 'baz]
  (let [result []]
    (for v ['foo 'bar 'baz]
      (push result v))
    result))

(check [0:'foo 1:'bar]
  (apply Vector (enumerate ['foo 'bar])))

(check [1:'foo 2:'bar]
  (apply Vector (enumerate ['foo 'bar] 1)))

(check [1 2 3]
  (apply Vector (map peek [1:'foo 2:'bar 3:'baz])))

(check [1 2 3 'bar 'baz 'foo \a \b \c]
  (apply Vector (append [1 2 3] {'foo 'bar 'baz} "abc")))

(check [1 'bar \a 2 'baz \b 'foo \c]
  (apply Vector (interleave 1:2 {'foo 'bar 'baz} "abc")))

(check 1
  (let [x:_ 1:2:3]
    x))

(check 2:3
  (let [_:x 1:2:3]
    x))

(check 3
  (let [_:_:x 1:2:3]
    x))

(check 7
  (^ foo [v result]
    (+ result v))

  (reduce foo [1 2 3] 1))

(check 'foo
  (or F 0 "" [] {} 'foo 'bar))

(check 'bar
  (and T 42 "foo" [1] {1:2} 'foo 'bar))

(check F
  (not 42))

(check T
  (not 0))
  
(check 'foo
  (if T 'foo 'bar))

(check 'bar
  (if F 'foo 'bar))

(check 'bar
  (if T (do 'foo 'bar)))

(check 42
  (define foo (+ 35 7))
  foo)

(check 42
  (let [foo 35
        bar (+ foo 7)]
    bar))

(check 42:_
  (define foo _)

  (^ bar []
    foo)

  (^ baz []
    (let [foo 42]
      (bar)))

  (baz):foo)

(check 42
  (^ foo [] 42)
  
  (foo))

(check 43
  (^ foo [x]
    (+ x 42))
    
  (foo 1))

(check 45
  (^ foo [x y]
    (+ x y 42))
    
  (foo 1 2))

(check 6
  (^ sum [n]
    (if (> n 1) (+ n (sum (- n 1))) n))
    
  (sum 3))

(check 55
  (^ fib[n]
    (if (< n 2) n (+ (fib (-1 n)) (fib (-1 n)))))
    
  (fib 10))

(check 55
  (^ fib [n lookup]
    (or (lookup n)
        (let [result (if (< n 2) n (+ (fib (- n 1) lookup)
                                      (fib (- n 2) lookup)))] 
          (lookup n result)
	  result)))

  (fib 10 {}))
				 
(check 55
  (^ fib[n a b]
    (if (> n 1) (fib (-1 n) b (+ a b)) (if (=0 n) a b)))
    
  (fib 10 0 1))

(check 45
  (^ foo[x]
    (^ bar[y]
      (+ x y))
      
    (bar 42))
    
  (foo 3))

(check 6
  (call + 1 2 3))

(check 6
  (apply + 1 [2 3]))

(check (- 3)
  (+.- 1 2))

(check [1 3]
  (apply Vector (map peek.peek [[1:2] [3:4]])))

(check [(- 5) (- 7) (- 9)]
  (apply Vector (map +.- [1 2 3] [4 5 6])))

(load (path "aoc/code1-1.jlg"))
(load (path "aoc/code2-1.jlg"))
(load (path "aoc/code3-1.jlg"))
(load (path "aoc/code4-1.jlg"))
(load (path "aoc/code5-1.jlg"))

(say (register-count) "registers allocated")