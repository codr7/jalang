(define red 12)
(define green 13)
(define blue 14)

(function decode-color [in out]
  (let [n:i (parse-integer in)
        c (symbol (slice in (+ i 1)))]
    (out c (max (or (out c) 0) n))))
  
(function decode-game [in out]
  (for [c (split in ",")]
    (decode-color c out)))
  
(function decode-line [in]
  (let [games (split (slice in (+ (_:find (function [c] (= c \:)) in) 1)) ";")
        out {}]
    (for [g games]
      (decode-game g out))
    out))
	
(function read-games [path]
  (enumerate (map decode-line (split (slurp path) "\n")) 1))

(function possible? [game]
  (let [g (tail game)]
    (not (or (> (g 'red) red)
         (> (g 'green) green)
         (> (g 'blue) blue)))))

(function possible-games [path]
  (let [games (read-games path)]
    (find-all possible? games)))

(function sum-games [path]
  (reduce + (map (function [g] (peek (peek g))) (possible-games path)) 0))
    
(check 2268
  (sum-games (path "input2")))