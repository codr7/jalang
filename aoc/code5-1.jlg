(^ decode-seeds [in]
  (let [i (find-character \: in)]
    (map parse-integer.peek (split (slice in (+ i 2)) " "))))

(^ decode-range [in out]
  (let [dst:src:len (apply List (map parse-integer.peek (split in " ")))]
    (for i len
      (out (+ src i) (+ dst i)))))

(^ decode-lines [in maps]
  (let [line (peek in)]
    (if (= line "")
      (do
	(let [m {}]
	  (push maps m)
	  (decode-lines (tail (tail in)) maps)))
      (if line
        (do 
	  (decode-range line (peek maps))
	  (decode-lines (tail in) maps))))))

(^ map-value [value map]
   (or (map value) value))

(^ get-location [path]
  (let [lines (apply List (split (slurp path) "\n"))
        seeds (Vector (decode-seeds (peek lines)))
        maps []]
    (decode-lines (tail lines) maps)
    (let [locations (map (^ [s] (reduce (^ [m v] (or (m v) v)) maps s)) seeds)
          sorted (apply Set (zip locations seeds))]
      (peek.peek (apply List sorted)))))

(say (get-location (path "input5")))
    