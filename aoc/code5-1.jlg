(^ decode-seeds [in]
  (let [i (find-character \: in)]
    (map parse-integer.peek (split (slice in (+ i 2)) " "))))

(^ decode-range [in out]
  (let [dst:src:len (apply List (map parse-integer.peek (split in " ")))]
    (push out src:dst:len)))

(^ decode-lines [in maps]
  (let [line (peek in)]
    (if (= line "")
      (let [m []]
        (push maps m) 
        (decode-lines (tail (tail in)) maps))
      (if line
        (do 
	  (decode-range line (peek maps))
	  (decode-lines (tail in) maps))))))

(^ map-value [ranges value]
  (for r ranges
    (let [src:dst:len r]
      (if (and (>= value src) (< value (+ src len)))
        (return (+ dst (- value src)))
        value))))

(^ get-location [path]
  (let [lines (apply List (split (slurp path) "\n"))
        seeds (apply Vector (decode-seeds (peek lines)))
        maps []]
    (decode-lines (tail lines) maps)
    (let [locations (map (^ [s] (reduce (^ [m v] (map-value m v)) maps s)) seeds)
          sorted (apply Set (zip locations seeds))]
      (peek.peek (apply List sorted)))))

(check 199602917
  (get-location (path "input5")))
    